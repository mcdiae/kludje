/*
 * Copyright 2015 McDowell
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

allprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'jacoco'
  apply plugin: 'signing'
  if (project.hasProperty('release')) {
    apply plugin: 'findbugs'
  }

  jacoco {
    toolVersion = "0.7.6.201602180812"
  }

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xlint:all"
    }
  }

  test {
    maxParallelForks = 10
  }

  task allDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    source(fileTree(dir: 'build/classes/main', exclude: '**/*.class'))
    classpath = sourceSets.main.output + sourceSets.main.compileClasspath
    options.addStringOption('Xdoclint:none', '-quiet')
  }

  task javadocJar(type: Jar, dependsOn: allDocs) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
  }

  task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    from fileTree(dir: 'build/classes/main', exclude: '**/*.class')
    classifier = 'sources'
  }

  compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
  }
  group = 'uk.kludje'
  version = '0.9-SNAPSHOT'

  artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
  }

  if (project.hasProperty('release')) {

    findbugs {
      //toolVersion = "2.0.1"
      //sourceSets = [sourceSets.main]
      //ignoreFailures = true
      //reportsDir = file("$project.buildDir/findbugsReports")
      //effort = "max"
      //reportLevel = "high"
      //visitors = ["FindSqlInjection", "SwitchFallthrough"]
      //omitVisitors = ["FindNonShortCircuit"]
      //includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
      excludeFilter = file("$rootProject.projectDir/findbugs/falsepositives.xml")
    }

    signing {
      sign configurations.archives
    }

    uploadArchives {
      repositories {
        mavenDeployer {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

          repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
          }

          snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
          }

          pom.project {
            packaging 'jar'
            url 'http://kludje.uk'

            scm {
              url 'git@github.com:mcdiae/kludje.git'
              connection 'git@github.com:mcdiae/kludje.git'
              developerConnection 'git@github.com:mcdiae/kludje.git'
            }

            licenses {
              license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
              }
            }

            developers {
              developer {
                id 'mcdiae'
                name 'McDowell'
              }
            }
          }
        }
      }
    }
  }
}

if (project.hasProperty('release')) {
  uploadArchives {
    repositories {
      mavenDeployer {
        pom.project {
          name 'kludje'
          packaging 'pom'
          description 'Java 8 lambda API'
        }
      }
    }
  }
}

subprojects {
  repositories {
    mavenCentral()
  }
  dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'com.google.jimfs:jimfs:1.1'
  }
}

project(':kludje-testkit') {
  dependencies {
    compile project(':kludje-annotation')
    compile project(':kludje-core')
    compile project(':kludje-experimental')
  }
}

project(':kludje-core') {
  configurations {
    provided
  }

  sourceSets {
    main {
      compileClasspath += configurations.provided
    }
  }

  dependencies {
    provided project(':kludje-annotation')
  }
}

project(':kludje-experimental') {
  dependencies {
    compile project(':kludje-core')
  }
}



